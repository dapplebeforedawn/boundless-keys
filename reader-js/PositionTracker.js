// Generated by CoffeeScript 1.6.1
(function() {
  var EventEmitter, Frame, InitialFrame, MMA8452Q, PositionTracker,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require("events").EventEmitter;

  Frame = require("./Frame");

  InitialFrame = require("./InitialFrame");

  MMA8452Q = require("./MMA8452Q");

  PositionTracker = (function(_super) {

    __extends(PositionTracker, _super);

    function PositionTracker(speed) {
      this.speed = speed;
      this.speed || (this.speed = 50);
      this.initialFrame = null;
      this.accelerometer = new MMA8452Q;
    }

    PositionTracker.prototype.init = function(afterInit) {
      var initPrevious, nTimes, previousValue;
      previousValue = [0, 0, 0, 0];
      nTimes = 30;
      initPrevious = function(times, afterInit) {
        var computeNext, readResult;
        if (!times) {
          this.initialFrame = new InitialFrame(previousValue);
          afterInit.call(this);
          return;
        }
        computeNext = function(values) {
          var pX, pY, pZ, stamp, x, y, z;
          x = values[0], y = values[1], z = values[2], stamp = values[3];
          pX = previousValue[0], pY = previousValue[1], pZ = previousValue[2];
          return previousValue = [pX + x / nTimes, pY + y / nTimes, pZ + z / nTimes, stamp];
        };
        readResult = function(err, values) {
          computeNext(values);
          return initPrevious.call(this, times - 1, afterInit);
        };
        return this.accelerometer.read(readResult.bind(this));
      };
      return initPrevious.call(this, nTimes, afterInit);
    };

    PositionTracker.prototype.run = function() {
      var step;
      step = function(lastFrame) {
        return function() {
          var readResult;
          readResult = function(err, values) {
            var newFrame;
            if (err) {
              return console.log(err);
            }
            newFrame = new Frame(lastFrame, this.initialFrame.tare(values));
            this.emit("data", newFrame);
            return setTimeout(step(newFrame).bind(this), this.speed);
          };
          return this.accelerometer.read(readResult.bind(this));
        };
      };
      return step(this.initialFrame).bind(this)();
    };

    PositionTracker.prototype.start = function() {
      return this.init(this.run);
    };

    return PositionTracker;

  })(EventEmitter);

  module.exports = PositionTracker;

}).call(this);
