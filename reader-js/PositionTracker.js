// Generated by CoffeeScript 1.6.1
(function() {
  var EventEmitter, Frame, InitialFrame, MMA8452Q, PositionTracker,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require("events").EventEmitter;

  Frame = require("./Frame");

  InitialFrame = require("./InitialFrame");

  MMA8452Q = require("./MMA8452Q");

  PositionTracker = (function(_super) {

    __extends(PositionTracker, _super);

    function PositionTracker(speed) {
      this.speed = speed;
      this.speed || (this.speed = 50);
    }

    PositionTracker.prototype.start = function() {
      var accelerometer, afterInit, initPrevious, nTimes, previousValue, self;
      self = this;
      accelerometer = new MMA8452Q;
      previousValue = [0, 0, 0, 0];
      nTimes = 30;
      initPrevious = function(times, afterInit) {
        var computeNext;
        if (!times) {
          return afterInit();
        }
        computeNext = function(values) {
          var pX, pY, pZ, stamp, x, y, z;
          x = values[0], y = values[1], z = values[2], stamp = values[3];
          pX = previousValue[0], pY = previousValue[1], pZ = previousValue[2];
          return previousValue = [pX + x / nTimes, pY + y / nTimes, pZ + z / nTimes, stamp];
        };
        return accelerometer.read(function(err, values) {
          computeNext(values);
          return initPrevious(times - 1, afterInit);
        });
      };
      afterInit = function() {
        var initFrame, step;
        initFrame = new InitialFrame(previousValue);
        step = function(lastFrame) {
          return function() {
            return accelerometer.read(function(err, values) {
              var newFrame;
              if (err) {
                return console.log(err);
              }
              newFrame = new Frame(lastFrame, initFrame.tare(values));
              self.emit("data", newFrame);
              return setTimeout(step(newFrame), self.speed);
            });
          };
        };
        return step(initFrame)();
      };
      return initPrevious(nTimes, afterInit);
    };

    return PositionTracker;

  })(EventEmitter);

  module.exports = PositionTracker;

}).call(this);
